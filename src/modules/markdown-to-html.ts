import {
  base64,
  getCommandLineArgs,
  PipeFunctions,
  PipeServerAPIv03,
  processPipeMessages,
} from "../dependencies.ts";

/*
  TODO:
  - Auto reload by polling?
  - Add generated by and pgp+checksum (separate pipeline?)
  - VIM keybindings for the pages themselves (another plugin maybe?)
  - Remove multiple svgs with the same data and reference it ( not easy )
*/

const args = getCommandLineArgs({
  highlightSupport: true,
  graphvizSupport: true,
  autotocSupport: true,
  embeddedYoutubeLinks: true,
  addEditInVimLink: true,
  changeHtmlLinksToVim: true,
});

const markdownToHtmlHandler = (
  message: PipeServerAPIv03,
  pipe: PipeFunctions,
) => {
  // we only care about messages that already contain type=markdown
  if (message.reply.type !== "markdown" || message.reply.body === undefined) {
    return message;
  }

  pipe.debug("Converting markdown to html5");

  message.reply.body = htmlTemplate(
    message.reply.body!,
    message.request.fullUrl,
  );
  message.reply.type = "html";

  return message;
};

const highlightSupport = `
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/default.min.css">
  <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/highlight.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/languages/vim.min.js"></script>
  <script>window.addEventListener('load', hljs.highlightAll);</script>
`;

const graphvizSupport = `
  <script src="https://cdnjs.cloudflare.com/ajax/libs/viz.js/2.1.2/viz.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/viz.js/2.1.2/full.render.js"></script>
  <script>
  window.addEventListener('load', () => {
      var viz = new Viz();

      let dot_documents = document.querySelectorAll('code.language-dot');
  
      dot_documents.forEach(node => {
          let code = node.textContent;
          console.log(code);
  
          viz.renderSVGElement(code)
          .then(function(element) {
              node.parentNode.replaceChild(element, node);
              // take it out of the <pre> tag
              let pre = element.parentNode;
              pre.parentNode.replaceChild(element, pre);
          })
          .catch(error => {
              // Create a new Viz instance (@see Caveats page for more info)
              viz = new Viz();
  
              // Possibly display the error
              console.error(error);
          });
      });
  });
  </script>
`;

// add this for extra css:
const autotocSupport = `
  <script src="https://cdnjs.cloudflare.com/ajax/libs/tocbot/4.11.1/tocbot.min.js"></script>
  <!--<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/tocbot/4.11.1/tocbot.css">-->
  <script>
  window.addEventListener('load', () => {
    tocbot.init({
      // Where to render the table of contents.
      tocSelector: '.toc',
      // Where to grab the headings to build the table of contents.
      contentSelector: '#markdown-body'
    });
  });
  </script>
`;

const showdownjsSupport = `
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/github-markdown-css/4.0.0/github-markdown.min.css">
  <script src="https://cdnjs.cloudflare.com/ajax/libs/showdown/1.9.1/showdown.min.js"></script>

  <script>

  function decodeUnicode(str) {
    // Going backwards: from bytestream, to percent-encoding, to original string.
    return decodeURIComponent(atob(str).split('').map(function (c) {
      return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
    }).join(''));
  }

  window.addEventListener('load', () => {

      // extension
      showdown.extension('header-anchors', function() {

        var ancTpl = '$1<a id="user-content-$3" class="anchor" href="#$3" aria-hidden="true"><svg aria-hidden="true" class="octicon octicon-link" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>$4';

        return [{
          type: 'html',
          regex: /(<h([1-3]) id="([^"]+?)">)(.*<\\/h\\2>)/g,
          replace: ancTpl
        }];
      });

      // options
      showdown.setFlavor('github');
      showdown.setOption('simplifiedAutoLink', true);
      showdown.setOption('strikethrough', true);
      showdown.setOption('tables', true);
      showdown.setOption('tasklists', true);
      showdown.setOption('requireSpaceBeforeHeadingText', true);
      showdown.setOption('emoji', true);
      showdown.setOption('metadata', true);

      var converter = new showdown.Converter({
        extensions: ['header-anchors']
      }),
      text = document.getElementById("markdown-source").textContent,
      html = converter.makeHtml(decodeUnicode(text));

      var body = document.getElementById("markdown-body");
      body.innerHTML = html;

      console.log('metadata', converter.getMetadata());

      if (converter.getMetadata().title){
        document.title = converter.getMetadata().title;
      }

      Object.keys(converter.getMetadata()).map(
        (data) => {
          var meta = document.createElement('meta');
          meta.name = data;
          meta.content = converter.getMetadata()[data];
          document.getElementsByTagName('HEAD')[0].appendChild(meta);
        }
      );

      // remove the markdown source from the document
      document.getElementById("markdown-source").remove()
    });
    </script>
`;

const embeddedYoutubeLinks = `
<script>
  window.addEventListener('load', () => {
    
    let allLinks = document.getElementsByTagName("A");
    let properArray = [];
    for(let i=0;i<allLinks.length;i++){
      properArray.push(allLinks.item(i));
    }

    properArray.forEach(element => {
      const regExp = /^.*(youtu.be\\/|v\\/|u\\/\\w\\/|embed\\/|watch\\?v=|&v=)([^#&?]*).*/;
      const match = element.href.match(regExp);

      const videoId = (match && match[2].length === 11) ? match[2] : null;
      if(videoId === null) return; // not a youtube link

      const newElement = document.createElement('iframe');
      newElement.width = 560;
      newElement.height = 315;
      newElement.frameBorder = 0;
      newElement.allowFullscreen = true;
      newElement.src = 'https://www.youtube.com/embed/' + videoId + '?modestbranding=1'

      element.parentElement.replaceChild(newElement,element);
    });
  });
  </script>
`;

const addEditInVimLink = `
<script>
window.addEventListener('load', () => {
  const element = document.getElementById("markdown-url");
  const source_url = (element)?element.textContent:window.location.href;
  const description = "[edit in vIM]";
  const body = document.getElementById("markdown-body");
  const anchor = document.createElement('a');
  anchor.href = source_url;
  anchor.setAttribute("type","vim");
  anchor.style = 'position:fixed;right:20px;top:0';
  anchor.appendChild(document.createTextNode(description));
  
  body.appendChild(anchor);

  // remove the markdown url from the document
  document.getElementById("markdown-url").remove()
});
</script>
`;

const vimSvgIcon2KB =
  '<svg id="vim-svg" class="svg-icon" aria-hidden="true" viewBox="0 0 24 24"><path d="M24 11.986h-.027l-4.318-4.318 4.303-4.414V1.461l-.649-.648h-8.198l-.66.605v1.045L12.015.027V0L12 .014 11.986 0v.027l-1.29 1.291-.538-.539H2.035l-.638.692v1.885l.616.616h.72v5.31L.027 11.987H0L.014 12 0 12.014h.027l2.706 2.706v6.467l.907.523h2.322l1.857-1.904 4.166 4.166V24l.015-.014.014.014v-.028l2.51-2.509h.485c.111 0 .211-.07.25-.179l.146-.426a.262.262 0 00-.037-.239l1.462-1.462-.612 1.962a.265.265 0 00.255.344h1.824a.266.266 0 00.243-.163l.165-.394a.27.27 0 00-.247-.365h-.075l.84-2.644h1.232l-1.016 3.221a.266.266 0 00.255.344h2.002c.11 0 .207-.066.248-.17l.164-.428a.266.266 0 00-.249-.358h-.145l1.131-3.673a.263.263 0 00-.039-.24l-.375-.504-.003-.005a.267.267 0 00-.209-.102h-1.436a.266.266 0 00-.19.081l-.4.439h-.624l-.042-.046 4.445-4.445H24L23.986 12l.014-.014zM9.838 21.139l1.579-4.509h-.501l.297-.304h1.659l-1.563 4.555h.623l-.079.258H9.838zm3.695-7.516l.15.151-.269.922-.225.226h-.969l-.181-.181.311-.871.288-.247h.895zM5.59 20.829H3.877l-.262-.15V3.091H2.379l-.1-.1V1.815l.143-.154h7.371l.213.214v1.108l-.142.173H8.785v8.688l8.807-8.688h-2.086l-.175-.188V1.805l.121-.111h7.49l.132.133v1.07L12.979 13.25h-.373c-.015-.001-.028 0-.042.001l-.02.003a.259.259 0 00-.119.06l-.343.295-.004.003a.273.273 0 00-.073.111l-.296.83-6.119 6.276zm14.768-3.952l.474-.519h1.334l.309.415-1.265 4.107h.493l-.08.209H19.84l1.124-3.564h-2.015l-1.077 3.391h.424l-.073.174h-1.605l1.107-3.548h-2.096l-1.062 3.339h.436l-.072.209H13.27l1.514-4.46h-.586l.091-.271h1.65l.519.537h.906l.491-.554h1.061l.489.535h.953z"/></svg>';

const changeHtmlLinksToVim = `
${vimSvgIcon2KB}
<script>
  // changes all anchors marked with "vim" to vim links
  window.addEventListener('load', () => {
    let allLinks = document.getElementsByTagName("A");
    let properArray = [];
    for(let i=0;i<allLinks.length;i++){
      properArray.push(allLinks.item(i));
    }

    properArray.forEach(element => {
      if(element.type === "vim"){
        
        const textNode = document.createTextNode("\u00A0"); // &nbsp;
        const newElement = element.cloneNode(true);
        const svgElement = document.getElementById("vim-svg").cloneNode(true);

        const href = element.href.replace("http://","vim://").replace("https://","vims://");
        newElement.href = href;
        newElement.setAttribute("class", "svg-icon-vim");
        newElement.removeAttribute("type");
        delete newElement.type;

        newElement.appendChild(textNode);
        newElement.appendChild(svgElement);
        newElement.setAttribute("title", "edit file in vIM");

        const parent = element.parentElement;
        element.parentElement.replaceChild(newElement, element);

        const newParentClassElements = (parent.getAttribute("class") || "") + " no-bottom-margin";
        parent.setAttribute("class", newParentClassElements.trim());
      }
    });

    document.getElementById("vim-svg").remove();
  });
</script>
`;

const baseCss = `
<style>
  @media print {
    h1:not(:first-of-type) {
      break-before:always
    }
  }
  @media (max-width: 767px) {
    .markdown-body {
      padding: 15px;
    }
  }
  .markdown-body {
		box-sizing: border-box;
		min-width: 200px;
		max-width: 980px;
		margin: 0 auto;
		padding: 45px;
	}
  .markdown-body pre > svg {
    max-width: 100%;
    height: auto;
  }
  .markdown-body svg {
    max-width: 100%;
  }

  .markdown-body p.no-bottom-margin{
    margin-bottom: 0px !important;
  }

  .svg-icon {
    width: 20px;
    height: 20px;
    position: absolute;
    top: -20px;
    left: -20px;
    fill: #41903F;
  }
  .svg-icon-vim svg {
    width: 20px;
    height: 20px;
    top: auto;
    left: auto;
    display: inline-block;
  }

</style>
`;

const htmlTemplate = (markdown: string, url: string) =>
  `<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, minimal-ui">
    ${baseCss}
    ${showdownjsSupport}
    ${args.highlightSupport ? highlightSupport : ""}
    ${args.graphvizSupport ? graphvizSupport : ""}
    ${args.autotocSupport ? autotocSupport : ""}
    ${args.embeddedYoutubeLinks ? embeddedYoutubeLinks : ""}
    ${args.addEditInVimLink ? addEditInVimLink : ""}
    ${args.changeHtmlLinksToVim ? changeHtmlLinksToVim : ""}
    <title>untitled file</title>
</head>
<body>
<pre id="markdown-url" style="display:none">${url}</pre>
<pre id="markdown-source" style="display:none">${
    base64.encodeUnicode(markdown)
  }</pre>
<div id="markdown-body" class="markdown-body"></div>
</body>
</html>
`;

processPipeMessages<PipeServerAPIv03>(
  markdownToHtmlHandler,
  "markdown-to-html",
);

// vim: ts=2 sts=2 sw=2 tw=0 noet
